#include <Windows.h>
#include <d3d9.h>
#include <mutex>
#include "dx_hook.h"
#include "../gui/gui.h"
#include "../esp/esp.h"
#include "../../model/minhook/include/MinHook.h"
#include "../../model/memory/memory.h"
#include "../../model/globals/globals.h"

#include "../imgui/imgui.h"
#include "../imgui/backends/imgui_impl_dx9.h"
#include "../imgui/backends/imgui_impl_win32.h"
#pragma comment(lib, "d3d9.lib")

typedef HRESULT (__stdcall* end_scene_t)(IDirect3DDevice9* device);
end_scene_t end_scene;

extern IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hwnd, UINT msg, WPARAM w_param, LPARAM l_param);

std::once_flag is_initialized;

bool render_interface = false;
bool window_focused = false;

WNDPROC original_window_proc;

LRESULT CALLBACK window_proc_hook(HWND hwnd, UINT msg, WPARAM w_param, LPARAM l_param) {
	if (render_interface) {
		ImGui_ImplWin32_WndProcHandler(hwnd, msg, w_param, l_param);
	}

	ImGui::GetIO().MouseDrawCursor = render_interface;

	switch (msg) {
	case WM_KILLFOCUS:
		window_focused = false;
		break;
	case WM_SETFOCUS:
		window_focused = true;
		break;
	case WM_KEYDOWN:
		if (w_param == VK_INSERT) {
			render_interface = !render_interface;
		}
		break;
	}

	if (render_interface && window_focused) {
		return TRUE;
	}

	return CallWindowProcA(original_window_proc, hwnd, msg, w_param, l_param);
}

HRESULT __stdcall end_scene_hook(IDirect3DDevice9* device) {
	std::call_once(is_initialized, [&]() {
		ImGui::CreateContext();
		ImGuiIO io = ImGui::GetIO();
		io.IniFilename = 0;

		ImGui_ImplWin32_Init(globals::tf2_hwnd);
		ImGui_ImplDX9_Init(device);
	});

	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();

	ImGui::NewFrame();

	//

	gui::update();
	esp::update();

	//

	ImGui::EndFrame();
	ImGui::Render();

	ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());

	return end_scene(device);
}

void dx_hook::initiate() {
	MH_Initialize();

	std::uintptr_t d3d9DLL = reinterpret_cast<std::uintptr_t>(GetModuleHandleA("d3d9.dll"));

	void* end_scene_func_in_dll = reinterpret_cast<void*>(memory::signature_scan(
		d3d9DLL,
		0x7FFFFFFF,
		"\x6A\x14\xB8\x00\x00\x00\x00\xE8\x00\x00\x00\x00\x8B\x7D\x08\x8B\xDF\x8D\x47\x04\xF7\xDB\x1B\xDB\x23\xD8\x89\x5D\xE0\x33\xF6\x89\x75\xE4\x39\x73\x18\x75\x73",
		"xxx????x????xxxxxxxxxxxxxxxxxxxxxxxxxxx"
	));

	MH_CreateHook(end_scene_func_in_dll, end_scene_hook, reinterpret_cast<void**>(&end_scene));
	MH_EnableHook(end_scene_func_in_dll);

	original_window_proc = reinterpret_cast<WNDPROC>(SetWindowLongPtrA(globals::tf2_hwnd, GWL_WNDPROC, reinterpret_cast<LONG_PTR>(window_proc_hook)));
}