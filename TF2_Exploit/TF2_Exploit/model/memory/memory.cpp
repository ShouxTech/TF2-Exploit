#include <Windows.h>
#include "memory.h"

bool memory_compare(std::uint8_t* data, std::uint8_t* signature_bytes, const char* mask) {
	for (; *mask; ++mask, ++data, ++signature_bytes) {
		if ((*mask == 'x') && (*data != *signature_bytes)) {
			return false;
		}
	}
	return (*mask == NULL);
}

std::uintptr_t memory::signature_scan(std::uintptr_t start, std::uintptr_t size, const char* signature, const char* mask) {
	SYSTEM_INFO system_info;
	MEMORY_BASIC_INFORMATION memory_info;
	GetSystemInfo(&system_info);
	std::uintptr_t page_size = system_info.dwPageSize;
	DWORD bad_flags = PAGE_GUARD | PAGE_NOCACHE | PAGE_NOACCESS;

	std::uint8_t* data = new std::uint8_t[page_size];

	for (std::uintptr_t i = start; i < start + size; i += page_size) {
		VirtualQuery(reinterpret_cast<LPCVOID>(i), &memory_info, page_size);

		if (!(memory_info.Protect & bad_flags) && memory_info.State & MEM_COMMIT) {
			memcpy(data, reinterpret_cast<void*>(i), page_size);

			for (std::uintptr_t i2 = 0; i2 < page_size; i2++) {
				if (memory_compare(static_cast<std::uint8_t*>(data + i2), reinterpret_cast<std::uint8_t*>(const_cast<char*>(signature)), mask)) {
					delete[] data;
					std::uintptr_t result = i + i2;
					return result;
				}
			}
		}
	}

	delete[] data;
	return 0;
}