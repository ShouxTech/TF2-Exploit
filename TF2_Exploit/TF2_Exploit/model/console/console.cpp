#include <Windows.h>
#include "console.h"

#pragma warning(disable : 4996) // Allow for use of 'freopen'.

void console::create_console(const std::string& title) {
    {
        //*reinterpret_cast<BYTE*>(FreeConsole) = 0xC3;
        HMODULE library = LoadLibraryA("api-ms-win-core-console-l1-2-0.dll");
        if (!library) return;
        FARPROC free_console = GetProcAddress(library, "FreeConsole");
        if (!free_console) return;

        DWORD old_protection;
        VirtualProtect(free_console, sizeof(std::uint8_t), PAGE_EXECUTE_READWRITE, &old_protection);

        *reinterpret_cast<std::uint8_t*>(free_console) = 0xC3; // 0xC3 is the 'ret' instruction opcode.

        VirtualProtect(free_console, sizeof(std::uint8_t), old_protection, &old_protection);
    }
    AllocConsole();
    freopen("CONOUT$", "w", stdout);
    freopen("CONIN$", "r", stdin);
    SetConsoleTitleA(title.c_str());
}

void console::close_console() {
    {
        HMODULE library = LoadLibraryA("api-ms-win-core-console-l1-2-0.dll");
        if (!library) return;
        FARPROC free_console = GetProcAddress(library, "FreeConsole");
        if (!free_console) return;

        DWORD old_protection;
        VirtualProtect(free_console, sizeof(std::uint8_t), PAGE_EXECUTE_READWRITE, &old_protection);

        *reinterpret_cast<std::uint8_t*>(free_console) = 0x8B; // 0x8B is the original byte.

        VirtualProtect(free_console, sizeof(std::uint8_t), old_protection, &old_protection);
    }

    HWND console_hwnd = GetConsoleWindow();
    if (console_hwnd) {
        FreeConsole();
        PostMessage(console_hwnd, WM_CLOSE, 0, 0);
    }
}