#include <iostream>
#include <Windows.h>
#include <thread>
#include "../model/console/console.h"
#include "../model/utility/utility.h"
#include "../model/globals/globals.h"

#include "../model/classes/vengine/vengine.h"
#include "../model/classes/ventity_list/ventity_list.h"
#include "../model/classes/player/player.h"

#include "../view/dx_hook/dx_hook.h"

typedef void* (__cdecl* create_interface_t)(const char* name, int* return_code);

void* get_interface(const std::string& module_name, const std::string& interface_name) {
    create_interface_t create_interface = reinterpret_cast<create_interface_t>(GetProcAddress(GetModuleHandleA(module_name.c_str()), "CreateInterface"));
    return create_interface(interface_name.c_str(), 0);
}

int main() {
    console::create_console(utility::create_random_string(6));

    vengine* engine = static_cast<vengine*>(get_interface("engine.dll", "VEngineClient014"));
    ventity_list* entity_list = static_cast<ventity_list*>(get_interface("client.dll", "VClientEntityList003"));

    globals::engine = engine;
    globals::entity_list = entity_list;

    globals::tf2_hwnd = FindWindowA(nullptr, "Team Fortress 2");

    dx_hook::initiate();

    std::cout << "Disable mutli-core rendering in settings to stop ESP flickering.\n";
};

BOOL APIENTRY DllMain(HMODULE hmodule, DWORD ul_reason_for_call, LPVOID lp_reserved) {
    switch (ul_reason_for_call) {
    case DLL_PROCESS_ATTACH:
        std::thread(main).detach();
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }

    return TRUE;
}

